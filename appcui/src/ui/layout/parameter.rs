#[repr(u8)]
#[derive(Copy, Clone)]
pub(super) enum Parameter {
    X = 0,
    Y = 1,
    Left = 2,
    Right = 3,
    Top = 4,
    Bottom = 5,
    Width = 6,
    Height = 7,
    Align = 8,
    Dock = 9,
}

static HASH_TO_PARAMETER: [Option<Parameter>; 47] = [
    None,
    Some(Parameter::Bottom),
    None,
    Some(Parameter::Dock),
    None,
    None,
    Some(Parameter::Align),
    Some(Parameter::Top),
    None,
    Some(Parameter::Bottom),
    None,
    Some(Parameter::Left),
    None,
    None,
    None,
    Some(Parameter::Height),
    None,
    None,
    Some(Parameter::Left),
    Some(Parameter::Top),
    Some(Parameter::Width),
    Some(Parameter::Align),
    None,
    None,
    None,
    Some(Parameter::Right),
    Some(Parameter::Width),
    None,
    None,
    None,
    Some(Parameter::Y),
    Some(Parameter::X),
    None,
    None,
    Some(Parameter::Right),
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    Some(Parameter::Dock),
    None,
    Some(Parameter::Height),
    None,
];

static HASH_COLISION_VALIDATOR: [u64; 47] = [
    0x0,
    0xE117B24625D0110A,
    0x0,
    0xAF63D94C8601E773,
    0x0,
    0x0,
    0xAF63DC4C8601EC8C,
    0x56F9BC194465A83C,
    0x0,
    0xAF63DF4C8601F1A5,
    0x0,
    0xAF63E14C8601F50B,
    0x0,
    0x0,
    0x0,
    0xAF63E54C8601FBD7,
    0x0,
    0x0,
    0x24B070ADA2041CB0,
    0xAF63E94C860202A3,
    0xAF63EA4C86020456,
    0x509903BB65AC341E,
    0x0,
    0x0,
    0x0,
    0xAF63EF4C86020CD5,
    0xDBDACD932FD1E9BF,
    0x0,
    0x0,
    0x0,
    0xAF63F44C86021554,
    0xAF63F54C86021707,
    0x0,
    0x0,
    0x76AAAA535714D805,
    0x0,
    0x0,
    0x0,
    0x0,
    0x0,
    0x0,
    0x0,
    0x0,
    0xDC48156761F5463A,
    0x0,
    0x17720BF67D347222,
    0x0,
];

impl Parameter {
    pub(super) fn from_hash(hash: u64) -> Option<Parameter> {
        let entry_index = (hash % 47) as usize;
        if HASH_COLISION_VALIDATOR[entry_index] != hash {
            return None;
        }
        HASH_TO_PARAMETER[entry_index]
    }
}
